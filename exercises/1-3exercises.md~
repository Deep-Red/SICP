# Section 1.3 #

## **Exercise 1.29:** Simpson's Rule is a more accurate method of numerical integration than the method illustrated above. Using Simpson's Rule, the integral of a function f between a and b is approximated as *(image on page 60)* where h=(b-a)/n, for some even integer n, and y<sub>k</sub>=f(a+kh). (Increasing n increases the accuracy of the approximation.) Define a procedure that takes as arguments f, a, b, and n and returns the value of the integral, computed using Simpson's Rule. Use your procedure to integrate cube between 0 and 1 (with n=100 and n=1000), and compare the results to those of the integral procedure shown above.##

*
(define (simpson f a b n)
  (define (inc x) (+ x 1))
  (define h (/ (- b a) n))
  (define (y k) (f (+ a (* k h))))
  (define (term k)
    (* (cond ((or (= k 0) (= k n)) 1)
	     ((* (+ 1 (modulo k 2)) 2)))
       (y k)))
  (* (/ h 3)
     (sum term 0 inc n)
     ))
This procedure returns an integer, in this case the exact result.
*

---

## **Exercise 1.30:** The sum procedure above generates a linear recursion. The procedure can be rewritten so that the sum is performed iteratively. Show how to do this by filling in the missing expressions in the following definition:  
    (define (sum term a next b) 
      (define (iter a result)
        (if <??>
	    <??>
	    (iter <??> <??>)))
      (iter <??> <??>))

*
    (define (sum-iter term a next b)
      (define (iter a result)
        (if (> a b)
            result
            (iter (next a) (+ (term a) result))))
      (iter a 0))
*

---

## **Exercise 1.31:** a. The sum procedure is only the simplest of a vast number of similar abstractions that can be captured as higher-order procedures. Write an analogous procedure called product that returst the product of the values of a function at points over a given range. Show how to define factorial in terms of product. Also use product to compute approximations to pi using the formula *(John Wallis's formula, pictured on page 60)*
b. If your product procedure generates a recursive process, write one that generates an iterative process. If it generates an iterative process, write one that generates a recursive process.

*

*